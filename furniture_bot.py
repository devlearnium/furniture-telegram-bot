#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç - –ö–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –º–µ–±–µ–ª–∏ —Å —É–¥–æ–±–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway.app
"""

import logging
import sqlite3
import asyncio
import json
import os
import sys
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from contextlib import asynccontextmanager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    pass

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU, CATALOG, PRODUCT_VIEW, ADMIN_MENU, ADD_PRODUCT, EDIT_PRODUCT,
    WAITING_NAME, WAITING_DESCRIPTION, WAITING_PRICE, WAITING_CATEGORY,
    WAITING_IMAGES, WAITING_EDIT_FIELD, USER_PROFILE, CART_VIEW,
    ORDER_PHONE, ORDER_ADDRESS, ORDER_COMMENT
) = range(17)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(",") if x.strip().isdigit()]
DB_NAME = os.getenv("DATABASE_PATH", "furniture_bot.db")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

if not ADMIN_IDS:
    logger.warning("‚ö†Ô∏è ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ Telegram ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logger.info(f"üöÄ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(ADMIN_IDS)} ID(s)")
logger.info(f"üêõ –û—Ç–ª–∞–¥–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if DEBUG else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")

@dataclass
class Product:
    """–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞"""
    id: Optional[int] = None
    name: str = ""
    description: str = ""
    price: float = 0.0
    category: str = ""
    images: List[str] = None
    created_at: Optional[datetime] = None
    is_active: bool = True
    
    def __post_init__(self):
        if self.images is None:
            self.images = []

@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None
    is_admin: bool = False
    created_at: Optional[datetime] = None

@dataclass
class CartItem:
    """–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã"""
    product_id: int
    quantity: int
    product_name: str
    product_price: float

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_name: str = DB_NAME):
        self.db_name = db_name
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                phone TEXT,
                is_admin BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                category TEXT NOT NULL,
                images TEXT,  -- JSON –º–∞—Å—Å–∏–≤
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cart (
                user_id INTEGER,
                product_id INTEGER,
                quantity INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, product_id),
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (product_id) REFERENCES products(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                products TEXT,  -- JSON
                total_amount REAL,
                phone TEXT,
                address TEXT,
                comment TEXT,
                status TEXT DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                emoji TEXT DEFAULT 'ü™ë'
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            ('–î–∏–≤–∞–Ω—ã –∏ –∫—Ä–µ—Å–ª–∞', '–ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å –¥–ª—è –≥–æ—Å—Ç–∏–Ω–æ–π', 'üõãÔ∏è'),
            ('–°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è', '–ú–µ–±–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ –∏ —Å—Ç–æ–ª–æ–≤–æ–π', 'ü™ë'),
            ('–®–∫–∞—Ñ—ã –∏ –∫–æ–º–æ–¥—ã', '–ú–µ–±–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è', 'üóÑÔ∏è'),
            ('–ö—Ä–æ–≤–∞—Ç–∏', '–ú–µ–±–µ–ª—å –¥–ª—è —Å–ø–∞–ª—å–Ω–∏', 'üõèÔ∏è'),
            ('–î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å', '–ú–µ–±–µ–ª—å –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –∫–æ–º–Ω–∞—Ç', 'üé®'),
            ('–û—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å', '–ú–µ–±–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã', 'üíº')
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO categories (name, description, emoji) 
            VALUES (?, ?, ?)
        ''', categories)
        
        conn.commit()
        conn.close()
    
    def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return User(
                id=row[0], username=row[1], first_name=row[2],
                last_name=row[3], phone=row[4], is_admin=bool(row[5]),
                created_at=row[6]
            )
        return None
    
    def save_user(self, user: User):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (id, username, first_name, last_name, phone, is_admin) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name, 
              user.phone, user.is_admin))
        
        conn.commit()
        conn.close()
    
    def get_categories(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, description, emoji FROM categories ORDER BY name')
        rows = cursor.fetchall()
        conn.close()
        
        return [{'name': row[0], 'description': row[1], 'emoji': row[2]} for row in rows]
    
    def get_products_by_category(self, category: str) -> List[Product]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, description, price, category, images, created_at, is_active 
            FROM products WHERE category = ? AND is_active = TRUE 
            ORDER BY created_at DESC
        ''', (category,))
        
        rows = cursor.fetchall()
        conn.close()
        
        products = []
        for row in rows:
            images = json.loads(row[5]) if row[5] else []
            products.append(Product(
                id=row[0], name=row[1], description=row[2], price=row[3],
                category=row[4], images=images, created_at=row[6], is_active=bool(row[7])
            ))
        
        return products
    
    def get_product_by_id(self, product_id: int) -> Optional[Product]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, name, description, price, category, images, created_at, is_active 
            FROM products WHERE id = ?
        ''', (product_id,))
        
        row = cursor.fetchone()
        conn.close()
        
        if row:
            images = json.loads(row[5]) if row[5] else []
            return Product(
                id=row[0], name=row[1], description=row[2], price=row[3],
                category=row[4], images=images, created_at=row[6], is_active=bool(row[7])
            )
        return None
    
    def save_product(self, product: Product) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        images_json = json.dumps(product.images)
        
        if product.id:
            cursor.execute('''
                UPDATE products SET name = ?, description = ?, price = ?, 
                category = ?, images = ?, is_active = ? WHERE id = ?
            ''', (product.name, product.description, product.price, 
                  product.category, images_json, product.is_active, product.id))
            product_id = product.id
        else:
            cursor.execute('''
                INSERT INTO products (name, description, price, category, images, is_active) 
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (product.name, product.description, product.price, 
                  product.category, images_json, product.is_active))
            product_id = cursor.lastrowid
        
        conn.commit()
        conn.close()
        return product_id
    
    def delete_product(self, product_id: int):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('UPDATE products SET is_active = FALSE WHERE id = ?', (product_id,))
        
        conn.commit()
        conn.close()
    
    def get_cart_items(self, user_id: int) -> List[CartItem]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT c.product_id, c.quantity, p.name, p.price 
            FROM cart c 
            JOIN products p ON c.product_id = p.id 
            WHERE c.user_id = ? AND p.is_active = TRUE
        ''', (user_id,))
        
        rows = cursor.fetchall()
        conn.close()
        
        return [CartItem(row[0], row[1], row[2], row[3]) for row in rows]
    
    def add_to_cart(self, user_id: int, product_id: int, quantity: int = 1):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO cart (user_id, product_id, quantity) 
            VALUES (?, ?, COALESCE((SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?), 0) + ?)
        ''', (user_id, product_id, user_id, product_id, quantity))
        
        conn.commit()
        conn.close()
    
    def remove_from_cart(self, user_id: int, product_id: int):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM cart WHERE user_id = ? AND product_id = ?', (user_id, product_id))
        
        conn.commit()
        conn.close()
    
    def clear_cart(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM cart WHERE user_id = ?', (user_id,))
        
        conn.commit()
        conn.close()
    
    def create_order(self, user_id: int, products: List[Dict], total: float, 
                    phone: str, address: str, comment: str = "") -> int:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO orders (user_id, products, total_amount, phone, address, comment) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, json.dumps(products), total, phone, address, comment))
        
        order_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return order_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class FurnitureBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db = db
        self.user_states = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = self.db.get_user(user_id)
        return user_id in ADMIN_IDS or (user and user.is_admin)
    
    def format_price(self, price: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        return f"{price:,.0f} ‚ÇΩ".replace(",", " ")
    
    def get_main_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
             InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        ]
        
        if self.is_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_categories_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = self.db.get_categories()
        keyboard = []
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(categories), 2):
            row = []
            for j in range(i, min(i + 2, len(categories))):
                cat = categories[j]
                row.append(InlineKeyboardButton(
                    f"{cat['emoji']} {cat['name']}", 
                    callback_data=f"category_{cat['name']}"
                ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    def get_products_keyboard(self, category: str, page: int = 0) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        products = self.db.get_products_by_category(category)
        keyboard = []
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 10 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        items_per_page = 10
        start_idx = page * items_per_page
        end_idx = start_idx + items_per_page
        page_products = products[start_idx:end_idx]
        
        for product in page_products:
            keyboard.append([InlineKeyboardButton(
                f"{product.name} - {self.format_price(product.price)}", 
                callback_data=f"product_{product.id}"
            )])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"products_{category}_{page-1}"))
        if end_idx < len(products):
            nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"products_{category}_{page+1}"))
        
        if nav_row:
            keyboard.append(nav_row)
        
        keyboard.append([
            InlineKeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_product_keyboard(self, product_id: int, user_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_cart_{product_id}")],
            [InlineKeyboardButton("üìã –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_products")],
        ]
        
        if self.is_admin(user_id):
            keyboard.insert(1, [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_product_{product_id}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product_id}")
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–ê–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
             InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = User(
            id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            is_admin=user.id in ADMIN_IDS
        )
        self.db.save_user(db_user)
        
        welcome_text = f"""
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 
–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –¥–æ–º–∞ –∏ –æ—Ñ–∏—Å–∞.

üõãÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥
üõí –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
üìû –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_main_keyboard(user.id)
        )
        
        return MAIN_MENU
    
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        
        text = """
üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –º–µ–±–µ–ª–∏!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
"""
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_main_keyboard(user.id)
        )
        
        return MAIN_MENU
    
    async def catalog(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        text = """
üìã *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_categories_keyboard()
        )
        
        return CATALOG
    
    async def show_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data.startswith("category_"):
            category = callback_data.replace("category_", "")
            page = 0
        elif callback_data.startswith("products_"):
            parts = callback_data.split("_")
            category = "_".join(parts[1:-1])
            page = int(parts[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        context.user_data['current_category'] = category
        
        products = self.db.get_products_by_category(category)
        
        if not products:
            text = f"üìã *{category}*\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
        else:
            text = f"üìã *{category}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_products_keyboard(category, page)
        )
        
        return CATALOG
    
    async def show_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        product_id = int(query.data.replace("product_", ""))
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return CATALOG
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞
        context.user_data['current_product'] = product_id
        
        text = f"""
üõãÔ∏è *{product.name}*

üìù {product.description}

üí∞ *–¶–µ–Ω–∞: {self.format_price(product.price)}*

üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}
"""
        
        if product.images:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                await context.bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=product.images[0],
                    caption=text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=self.get_product_keyboard(product_id, query.from_user.id)
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                if len(product.images) > 1:
                    media_group = []
                    for img_url in product.images[1:]:
                        media_group.append(InputMediaPhoto(media=img_url))
                    
                    await context.bot.send_media_group(
                        chat_id=query.message.chat.id,
                        media=media_group
                    )
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.delete_message()
                
            except Exception as e:
                logger.error(f"Error sending product images: {e}")
                await query.edit_message_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=self.get_product_keyboard(product_id, query.from_user.id)
                )
        else:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self.get_product_keyboard(product_id, query.from_user.id)
            )
        
        return PRODUCT_VIEW
    
    async def add_to_cart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        query = update.callback_query
        await query.answer()
        
        product_id = int(query.data.replace("add_cart_", ""))
        user_id = query.from_user.id
        
        product = self.db.get_product_by_id(product_id)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return PRODUCT_VIEW
        
        self.db.add_to_cart(user_id, product_id)
        
        await query.answer(f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
        
        return PRODUCT_VIEW
    
    async def show_cart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            text = "üõí *–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!"
            keyboard = [
                [InlineKeyboardButton("üìã –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
            ]
        else:
            text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
            total = 0
            
            for item in cart_items:
                item_total = item.product_price * item.quantity
                total += item_total
                text += f"‚Ä¢ {item.product_name}\n"
                text += f"  {item.quantity} x {self.format_price(item.product_price)} = {self.format_price(item_total)}\n\n"
            
            text += f"üí∞ *–ò—Ç–æ–≥–æ: {self.format_price(total)}*"
            
            keyboard = [
                [InlineKeyboardButton("üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
                [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
                [InlineKeyboardButton("üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
            ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CART_VIEW
    
    async def clear_cart(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        self.db.clear_cart(user_id)
        
        await query.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
        return await self.show_cart(update, context)
    
    async def checkout(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return await self.show_cart(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        context.user_data['order_items'] = cart_items
        
        text = "üìû *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
        
        return ORDER_PHONE
    
    async def get_order_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        phone = update.message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) < 10:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return ORDER_PHONE
        
        context.user_data['order_phone'] = phone
        
        await update.message.reply_text(
            "üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return ORDER_ADDRESS
    
    async def get_order_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        address = update.message.text.strip()
        
        if len(address) < 10:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return ORDER_ADDRESS
        
        context.user_data['order_address'] = address
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="finish_order")],
            [InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")]
        ]
        
        await update.message.reply_text(
            "üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É*\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ORDER_COMMENT
    
    async def get_order_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            if query.data == "add_comment":
                await query.edit_message_text(
                    "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:",
                    parse_mode=ParseMode.MARKDOWN
                )
                return ORDER_COMMENT
            else:  # finish_order
                context.user_data['order_comment'] = ""
                return await self.finish_order(update, context)
        else:
            # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = update.message.text.strip()
            context.user_data['order_comment'] = comment
            
            keyboard = [[InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_order")]]
            
            await update.message.reply_text(
                "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ORDER_COMMENT
    
    async def finish_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        query = update.callback_query
        if query:
            await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        cart_items = context.user_data.get('order_items', [])
        phone = context.user_data.get('order_phone', '')
        address = context.user_data.get('order_address', '')
        comment = context.user_data.get('order_comment', '')
        
        if not cart_items:
            text = "‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        else:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            order_products = []
            total = 0
            
            for item in cart_items:
                order_products.append({
                    'product_id': item.product_id,
                    'name': item.product_name,
                    'price': item.product_price,
                    'quantity': item.quantity,
                    'total': item.product_price * item.quantity
                })
                total += item.product_price * item.quantity
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = self.db.create_order(user_id, order_products, total, phone, address, comment)
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            self.db.clear_cart(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self.notify_admins_new_order(context, order_id, update.effective_user)
            
            text = f"""
‚úÖ *–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üìç –ê–¥—Ä–µ—Å: {address}
{f'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}' if comment else ''}

üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {self.format_price(total)}*

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè
"""
            
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        for key in ['order_items', 'order_phone', 'order_address', 'order_comment']:
            context.user_data.pop(key, None)
        
        if query:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return MAIN_MENU
    
    async def notify_admins_new_order(self, context: ContextTypes.DEFAULT_TYPE, order_id: int, user):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        text = f"""
üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}*

üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name}
üì± Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üÜî ID: {user.id}

–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏!
"""
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=text,
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
    
    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        db_user = self.db.get_user(user.id)
        
        text = f"""
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {db_user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""
        
        keyboard = [
            [InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change_phone")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return USER_PROFILE
    
    # –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò
    
    async def admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ê–¥–º–∏–Ω –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return MAIN_MENU
        
        text = """
‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∑–∞–∫–∞–∑–∞–º–∏:
"""
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_admin_keyboard()
        )
        
        return ADMIN_MENU
    
    async def start_add_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return ADMIN_MENU
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        context.user_data['new_product'] = Product()
        
        await query.edit_message_text(
            "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_NAME
    
    async def get_product_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        name = update.message.text.strip()
        
        if len(name) < 3:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:")
            return WAITING_NAME
        
        context.user_data['new_product'].name = name
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_DESCRIPTION
    
    async def get_product_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        description = update.message.text.strip()
        
        if len(description) < 10:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:")
            return WAITING_DESCRIPTION
        
        context.user_data['new_product'].description = description
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return WAITING_PRICE
    
    async def get_product_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        try:
            price = float(update.message.text.strip().replace(" ", "").replace(",", "."))
            if price <= 0:
                raise ValueError()
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000):")
            return WAITING_PRICE
        
        context.user_data['new_product'].price = price
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self.db.get_categories()
        keyboard = []
        
        for cat in categories:
            keyboard.append([InlineKeyboardButton(
                f"{cat['emoji']} {cat['name']}", 
                callback_data=f"select_cat_{cat['name']}"
            )])
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: {self.format_price(price)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return WAITING_CATEGORY
    
    async def get_product_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        category = query.data.replace("select_cat_", "")
        context.user_data['new_product'].category = category
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="finish_images")]
            ])
        )
        
        context.user_data['new_product'].images = []
        
        return WAITING_IMAGES
    
    async def get_product_images(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if update.callback_query:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            query = update.callback_query
            await query.answer()
            
            return await self.save_new_product(update, context)
        
        if update.message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞–∫ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            context.user_data['new_product'].images.append(photo.file_id)
            
            count = len(context.user_data['new_product'].images)
            await update.message.reply_text(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {count} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            
            return WAITING_IMAGES
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            return WAITING_IMAGES
    
    async def save_new_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        query = update.callback_query
        if query:
            await query.answer()
        
        product = context.user_data.get('new_product')
        if not product:
            text = "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            try:
                product_id = self.db.save_product(product)
                text = f"""
‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*

üÜî ID: {product_id}
üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}
üí∞ –¶–µ–Ω–∞: {self.format_price(product.price)}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}
üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product.images)}
"""
            except Exception as e:
                logger.error(f"Error saving product: {e}")
                text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('new_product', None)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="add_product")],
            [InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ]
        
        if query:
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return ADMIN_MENU
    
    async def delete_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return PRODUCT_VIEW
        
        product_id = int(query.data.replace("delete_product_", ""))
        product = self.db.get_product_by_id(product_id)
        
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return PRODUCT_VIEW
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{product_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"product_{product_id}")]
        ]
        
        await query.edit_message_text(
            f"üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\nüì¶ {product.name}\nüí∞ {self.format_price(product.price)}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return PRODUCT_VIEW
    
    async def confirm_delete_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        product_id = int(query.data.replace("confirm_delete_", ""))
        
        try:
            self.db.delete_product(product_id)
            await query.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = context.user_data.get('current_category')
            if category:
                return await self.show_category(update, context)
            else:
                return await self.catalog(update, context)
                
        except Exception as e:
            logger.error(f"Error deleting product: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
            return PRODUCT_VIEW
    
    async def back_to_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        category = context.user_data.get('current_category')
        if category:
            return await self.show_category(update, context)
        else:
            return await self.catalog(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–º–µ–Ω—ã
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return await self.start(update, context)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception:
                pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    if not BOT_TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        sys.exit(1)
    
    if not ADMIN_IDS:
        logger.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        logger.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = FurnitureBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", bot.start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(bot.catalog, pattern="^catalog$"),
                CallbackQueryHandler(bot.show_cart, pattern="^cart$"),
                CallbackQueryHandler(bot.show_profile, pattern="^profile$"),
                CallbackQueryHandler(bot.admin_menu, pattern="^admin$"),
            ],
            CATALOG: [
                CallbackQueryHandler(bot.main_menu, pattern="^main_menu$"),
                CallbackQueryHandler(bot.show_category, pattern="^category_"),
                CallbackQueryHandler(bot.show_category, pattern="^products_"),
                CallbackQueryHandler(bot.show_product, pattern="^product_"),
            ],
            PRODUCT_VIEW: [
                CallbackQueryHandler(bot.add_to_cart, pattern="^add_cart_"),
                CallbackQueryHandler(bot.back_to_products, pattern="^back_to_products$"),
                CallbackQueryHandler(bot.delete_product, pattern="^delete_product_"),
                CallbackQueryHandler(bot.confirm_delete_product, pattern="^confirm_delete_"),
                CallbackQueryHandler(bot.main_menu, pattern="^main_menu$"),
            ],
            CART_VIEW: [
                CallbackQueryHandler(bot.checkout, pattern="^checkout$"),
                CallbackQueryHandler(bot.clear_cart, pattern="^clear_cart$"),
                CallbackQueryHandler(bot.catalog, pattern="^catalog$"),
                CallbackQueryHandler(bot.main_menu, pattern="^main_menu$"),
            ],
            USER_PROFILE: [
                CallbackQueryHandler(bot.main_menu, pattern="^main_menu$"),
            ],
            ADMIN_MENU: [
                CallbackQueryHandler(bot.start_add_product, pattern="^add_product$"),
                CallbackQueryHandler(bot.main_menu, pattern="^main_menu$"),
            ],
            WAITING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_product_name),
            ],
            WAITING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_product_description),
            ],
            WAITING_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_product_price),
            ],
            WAITING_CATEGORY: [
                CallbackQueryHandler(bot.get_product_category, pattern="^select_cat_"),
            ],
            WAITING_IMAGES: [
                MessageHandler(filters.PHOTO, bot.get_product_images),
                CallbackQueryHandler(bot.get_product_images, pattern="^finish_images$"),
            ],
            ORDER_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_order_phone),
            ],
            ORDER_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_order_address),
            ],
            ORDER_COMMENT: [
                CallbackQueryHandler(bot.get_order_comment, pattern="^(add_comment|finish_order)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_order_comment),
            ],
        },
        fallbacks=[CommandHandler("cancel", bot.cancel)],
        persistent=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conversation_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
    logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
    logger.info("üåê –†–µ–∂–∏–º: Railway Cloud Hosting")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
